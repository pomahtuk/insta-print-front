// Generated by CoffeeScript 1.9.3
(function() {
  var Directory, Subset, TTFSubset, Tables, cloneDeep,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  cloneDeep = require('clone');

  Subset = require('./Subset');

  Directory = require('../tables/directory');

  Tables = require('../tables');

  TTFSubset = (function(superClass) {
    extend(TTFSubset, superClass);

    function TTFSubset() {
      return TTFSubset.__super__.constructor.apply(this, arguments);
    }

    TTFSubset.prototype._addGlyph = function(gid) {
      var buffer, component, curOffset, glyf, j, len, nextOffset, ref, stream;
      glyf = this.font.getGlyph(gid)._decode();
      curOffset = this.font.loca.offsets[gid];
      nextOffset = this.font.loca.offsets[gid + 1];
      stream = this.font._getTableStream('glyf');
      stream.pos += curOffset;
      buffer = stream.readBuffer(nextOffset - curOffset);
      if ((glyf != null ? glyf.numberOfContours : void 0) < 0) {
        buffer = new Buffer(buffer);
        ref = glyf.components;
        for (j = 0, len = ref.length; j < len; j++) {
          component = ref[j];
          gid = this.includeGlyph(component.glyphID);
          buffer.writeUInt16BE(gid, component.pos);
        }
      }
      this.glyf.push(buffer);
      this.loca.offsets.push(this.offset);
      if (gid < this.font.hmtx.metrics.length) {
        this.hmtx.metrics.push(this.font.hmtx.metrics.get(gid));
      } else {
        this.hmtx.metrics.push({
          advance: this.font.hmtx.metrics.get(this.font.hmtx.metrics.length - 1).advance,
          bearing: this.font.hmtx.bearings.get(gid - this.font.hmtx.metrics.length)
        });
      }
      this.offset += buffer.length;
      return this.glyf.length - 1;
    };

    TTFSubset.prototype.encode = function(stream) {
      var head, hhea, i, maxp;
      this.glyf = [];
      this.offset = 0;
      this.loca = {
        offsets: []
      };
      this.hmtx = {
        metrics: [],
        bearings: []
      };
      i = 0;
      while (i < this.glyphs.length) {
        this._addGlyph(this.glyphs[i++]);
      }
      maxp = cloneDeep(this.font.maxp);
      maxp.numGlyphs = this.glyf.length;
      this.loca.offsets.push(this.offset);
      Tables.loca.preEncode.call(this.loca);
      head = cloneDeep(this.font.head);
      head.indexToLocFormat = this.loca.version;
      hhea = cloneDeep(this.font.hhea);
      hhea.numberOfMetrics = this.hmtx.metrics.length;
      return Directory.encode(stream, {
        tables: {
          head: head,
          hhea: hhea,
          loca: this.loca,
          maxp: maxp,
          'cvt ': this.font['cvt '],
          prep: this.font.prep,
          glyf: this.glyf,
          hmtx: this.hmtx,
          fpgm: this.font.fpgm
        }
      });
    };

    return TTFSubset;

  })(Subset);

  module.exports = TTFSubset;

}).call(this);
