// Generated by CoffeeScript 1.9.3
(function() {
  var DFont, TTFFont, r;

  r = require('restructure');

  TTFFont = require('./TTFFont');

  DFont = (function() {
    var DFontData, DFontHeader, DFontMap, DFontName, Ref, Type, TypeList, get;

    get = require('./get')(DFont);

    DFontName = new r.String(r.uint8);

    DFontData = new r.Struct({
      len: r.uint32,
      buf: new r.Buffer('len')
    });

    Ref = new r.Struct({
      id: r.uint16,
      nameOffset: r.int16,
      attr: r.uint8,
      dataOffset: r.uint24,
      handle: r.uint32
    });

    Type = new r.Struct({
      name: new r.String(4),
      maxTypeIndex: r.uint16,
      refList: new r.Pointer(r.uint16, new r.Array(Ref, function() {
        return this.maxTypeIndex + 1;
      }), {
        type: 'parent'
      })
    });

    TypeList = new r.Struct({
      length: r.uint16,
      types: new r.Array(Type, function() {
        return this.length + 1;
      })
    });

    DFontMap = new r.Struct({
      reserved: new r.Reserved(r.uint8, 24),
      typeList: new r.Pointer(r.uint16, TypeList),
      nameListOffset: new r.Pointer(r.uint16, 'void')
    });

    DFontHeader = new r.Struct({
      dataOffset: r.uint32,
      map: new r.Pointer(r.uint32, DFontMap),
      dataLength: r.uint32,
      mapLength: r.uint32
    });

    DFont.probe = function(buffer) {
      var e, header, i, len, ref1, stream, type;
      stream = new r.DecodeStream(buffer);
      try {
        header = DFontHeader.decode(stream);
      } catch (_error) {
        e = _error;
        return false;
      }
      ref1 = header.map.typeList.types;
      for (i = 0, len = ref1.length; i < len; i++) {
        type = ref1[i];
        if (type.name === 'sfnt') {
          return true;
        }
      }
      return false;
    };

    function DFont(stream1) {
      var i, j, len, len1, ref, ref1, ref2, type;
      this.stream = stream1;
      this.header = DFontHeader.decode(this.stream);
      ref1 = this.header.map.typeList.types;
      for (i = 0, len = ref1.length; i < len; i++) {
        type = ref1[i];
        ref2 = type.refList;
        for (j = 0, len1 = ref2.length; j < len1; j++) {
          ref = ref2[j];
          if (ref.nameOffset >= 0) {
            this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
            ref.name = DFontName.decode(this.stream);
          } else {
            ref.name = null;
          }
        }
        if (type.name === 'sfnt') {
          this.sfnt = type;
        }
      }
      return;
    }

    DFont.prototype.getFont = function(name) {
      var font, i, len, pos, ref, ref1, stream;
      if (!this.sfnt) {
        return null;
      }
      ref1 = this.sfnt.refList;
      for (i = 0, len = ref1.length; i < len; i++) {
        ref = ref1[i];
        pos = this.header.dataOffset + ref.dataOffset + 4;
        stream = new r.DecodeStream(this.stream.buffer.slice(pos));
        font = new TTFFont(stream);
        if (font.postscriptName === name) {
          return font;
        }
      }
      return null;
    };

    get('fonts', function() {
      var fonts, i, len, pos, ref, ref1, stream;
      fonts = [];
      ref1 = this.sfnt.refList;
      for (i = 0, len = ref1.length; i < len; i++) {
        ref = ref1[i];
        pos = this.header.dataOffset + ref.dataOffset + 4;
        stream = new r.DecodeStream(this.stream.buffer.slice(pos));
        fonts.push(new TTFFont(stream));
      }
      return fonts;
    });

    return DFont;

  })();

  module.exports = DFont;

}).call(this);
