// Generated by CoffeeScript 1.9.3
(function() {
  var ClassTable, Kern2Array, KernPair, KernSubtable, KernTable, r;

  r = require('restructure');

  KernPair = new r.Struct({
    left: r.uint16,
    right: r.uint16,
    value: r.int16
  });

  ClassTable = new r.Struct({
    firstGlyph: r.uint16,
    nGlyphs: r.uint16,
    offsets: new r.Array(r.uint16, 'nGlyphs'),
    max: function() {
      return this.offsets.length && Math.max.apply(Math, this.offsets);
    }
  });

  Kern2Array = new r.Struct({
    off: function() {
      return this._startOffset - this.parent.parent._startOffset;
    },
    len: function() {
      return (((this.parent.leftTable.max - this.off) / this.parent.rowWidth) + 1) * (this.parent.rowWidth / 2);
    },
    values: new r.LazyArray(r.int16, 'len')
  });

  KernSubtable = new r.VersionedStruct('format', {
    0: {
      nPairs: r.uint16,
      searchRange: r.uint16,
      entrySelector: r.uint16,
      rangeShift: r.uint16,
      pairs: new r.Array(KernPair, 'nPairs')
    },
    2: {
      rowWidth: r.uint16,
      leftTable: new r.Pointer(r.uint16, ClassTable, {
        type: 'parent'
      }),
      rightTable: new r.Pointer(r.uint16, ClassTable, {
        type: 'parent'
      }),
      array: new r.Pointer(r.uint16, Kern2Array, {
        type: 'parent'
      })
    },
    3: {
      glyphCount: r.uint16,
      kernValueCount: r.uint8,
      leftClassCount: r.uint8,
      rightClassCount: r.uint8,
      flags: r.uint8,
      kernValue: new r.Array(r.int16, 'kernValueCount'),
      leftClass: new r.Array(r.uint8, 'glyphCount'),
      rightClass: new r.Array(r.uint8, 'glyphCount'),
      kernIndex: new r.Array(r.uint8, function() {
        return this.leftClassCount * this.rightClassCount;
      })
    }
  });

  KernTable = new r.VersionedStruct('version', {
    0: {
      subVersion: r.uint16,
      length: r.uint16,
      format: r.uint8,
      coverage: new r.Bitfield(r.uint8, ['horizontal', 'minimum', 'crossStream', 'override']),
      subtable: KernSubtable,
      padding: new r.Reserved(r.uint8, function() {
        return this.length - this._currentOffset;
      })
    },
    1: {
      length: r.uint32,
      coverage: new r.Bitfield(r.uint8, [null, null, null, null, null, 'variation', 'crossStream', 'vertical']),
      format: r.uint8,
      tupleIndex: r.uint16,
      subtable: KernSubtable,
      padding: new r.Reserved(r.uint8, function() {
        return this.length - this._currentOffset;
      })
    }
  });

  module.exports = new r.VersionedStruct(r.uint16, {
    0: {
      nTables: r.uint16,
      tables: new r.Array(KernTable, 'nTables')
    },
    1: {
      reserved: new r.Reserved(r.uint16),
      nTables: r.uint32,
      tables: new r.Array(KernTable, 'nTables')
    }
  });

}).call(this);
