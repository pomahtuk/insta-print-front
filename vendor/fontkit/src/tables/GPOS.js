// Generated by CoffeeScript 1.9.3
(function() {
  var Anchor, BaseArray, BaseRecord, ChainingContext, Class2Record, ClassDef, ComponentRecord, Context, Coverage, Device, EntryExitRecord, FeatureList, GPOSLookup, LigatureArray, LigatureAttach, LookupList, MarkArray, MarkRecord, PairSet, PairValueRecord, ScriptList, ValueFormat, ValueRecord, r, ref;

  r = require('restructure');

  ref = require('./opentype'), ScriptList = ref.ScriptList, FeatureList = ref.FeatureList, LookupList = ref.LookupList, Coverage = ref.Coverage, ClassDef = ref.ClassDef, Device = ref.Device, Context = ref.Context, ChainingContext = ref.ChainingContext;

  ValueFormat = new r.Bitfield(r.uint16, ['xPlacement', 'yPlacement', 'xAdvance', 'yAdvance', 'xPlaDevice', 'yPlaDevice', 'xAdvDevice', 'yAdvDevice']);

  ValueRecord = (function() {
    var types;

    function ValueRecord(key1) {
      this.key = key1 != null ? key1 : 'valueFormat';
    }

    types = {
      xPlacement: r.int16,
      yPlacement: r.int16,
      xAdvance: r.int16,
      yAdvance: r.int16,
      xPlaDevice: new r.Pointer(r.uint16, Device, {
        type: 'global',
        relativeTo: 'rel'
      }),
      yPlaDevice: new r.Pointer(r.uint16, Device, {
        type: 'global',
        relativeTo: 'rel'
      }),
      xAdvDevice: new r.Pointer(r.uint16, Device, {
        type: 'global',
        relativeTo: 'rel'
      }),
      yAdvDevice: new r.Pointer(r.uint16, Device, {
        type: 'global',
        relativeTo: 'rel'
      })
    };

    ValueRecord.prototype.buildStruct = function(parent) {
      var fields, included, key, ref1, struct, type;
      struct = parent;
      while (!struct[this.key] && struct.parent) {
        struct = struct.parent;
      }
      if (!struct[this.key]) {
        return;
      }
      fields = {};
      fields.rel = function() {
        return struct._startOffset;
      };
      ref1 = struct[this.key];
      for (key in ref1) {
        included = ref1[key];
        if (!(included)) {
          continue;
        }
        type = types[key];
        fields[key] = type;
      }
      return new r.Struct(fields);
    };

    ValueRecord.prototype.size = function(val, ctx) {
      return this.buildStruct(ctx).size(val, ctx);
    };

    ValueRecord.prototype.decode = function(stream, parent) {
      var res;
      res = this.buildStruct(parent).decode(stream, parent);
      delete res.rel;
      return res;
    };

    return ValueRecord;

  })();

  PairValueRecord = new r.Struct({
    secondGlyph: r.uint16,
    value1: new ValueRecord('valueFormat1'),
    value2: new ValueRecord('valueFormat2')
  });

  PairSet = new r.Array(PairValueRecord, r.uint16);

  Class2Record = new r.Struct({
    value1: new ValueRecord('valueFormat1'),
    value2: new ValueRecord('valueFormat2')
  });

  Anchor = new r.VersionedStruct(r.uint16, {
    1: {
      xCoordinate: r.int16,
      yCoordinate: r.int16
    },
    2: {
      xCoordinate: r.int16,
      yCoordinate: r.int16,
      anchorPoint: r.uint16
    },
    3: {
      xCoordinate: r.int16,
      yCoordinate: r.int16,
      xDeviceTable: new r.Pointer(r.uint16, Device),
      yDeviceTable: new r.Pointer(r.uint16, Device)
    }
  });

  EntryExitRecord = new r.Struct({
    entryAnchor: new r.Pointer(r.uint16, Anchor, {
      type: 'parent'
    }),
    exitAnchor: new r.Pointer(r.uint16, Anchor, {
      type: 'parent'
    })
  });

  MarkRecord = new r.Struct({
    "class": r.uint16,
    markAnchor: new r.Pointer(r.uint16, Anchor, {
      type: 'parent'
    })
  });

  MarkArray = new r.Array(MarkRecord, r.uint16);

  BaseRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function() {
    return this.parent.classCount;
  });

  BaseArray = new r.Array(BaseRecord, r.uint16);

  ComponentRecord = new r.Array(new r.Pointer(r.uint16, Anchor), function() {
    return this.parent.parent.classCount;
  });

  LigatureAttach = new r.Array(ComponentRecord, r.uint16);

  LigatureArray = new r.Array(new r.Pointer(r.uint16, LigatureAttach), r.uint16);

  GPOSLookup = new r.VersionedStruct('lookupType', {
    1: new r.VersionedStruct(r.uint16, {
      1: {
        coverage: new r.Pointer(r.uint16, Coverage),
        valueFormat: ValueFormat,
        value: new ValueRecord
      },
      2: {
        coverage: new r.Pointer(r.uint16, Coverage),
        valueFormat: ValueFormat,
        valueCount: r.uint16,
        values: new r.LazyArray(new ValueRecord, 'valueCount')
      }
    }),
    2: new r.VersionedStruct(r.uint16, {
      1: {
        coverage: new r.Pointer(r.uint16, Coverage),
        valueFormat1: ValueFormat,
        valueFormat2: ValueFormat,
        pairSetCount: r.uint16,
        pairSets: new r.LazyArray(new r.Pointer(r.uint16, PairSet), 'pairSetCount')
      },
      2: {
        coverage: new r.Pointer(r.uint16, Coverage),
        valueFormat1: ValueFormat,
        valueFormat2: ValueFormat,
        classDef1: new r.Pointer(r.uint16, ClassDef),
        classDef2: new r.Pointer(r.uint16, ClassDef),
        class1Count: r.uint16,
        class2Count: r.uint16,
        classRecords: new r.LazyArray(new r.LazyArray(Class2Record, 'class2Count'), 'class1Count')
      }
    }),
    3: {
      format: r.uint16,
      coverage: new r.Pointer(r.uint16, Coverage),
      entryExitCount: r.uint16,
      entryExitRecords: new r.Array(EntryExitRecord, 'entryExitCount')
    },
    4: {
      format: r.uint16,
      markCoverage: new r.Pointer(r.uint16, Coverage),
      baseCoverage: new r.Pointer(r.uint16, Coverage),
      classCount: r.uint16,
      markArray: new r.Pointer(r.uint16, MarkArray),
      baseArray: new r.Pointer(r.uint16, BaseArray)
    },
    5: {
      format: r.uint16,
      markCoverage: new r.Pointer(r.uint16, Coverage),
      ligatureCoverage: new r.Pointer(r.uint16, Coverage),
      classCount: r.uint16,
      markArray: new r.Pointer(r.uint16, MarkArray),
      ligatureArray: new r.Pointer(r.uint16, LigatureArray)
    },
    6: {
      format: r.uint16,
      mark1Coverage: new r.Pointer(r.uint16, Coverage),
      mark2Coverage: new r.Pointer(r.uint16, Coverage),
      classCount: r.uint16,
      mark1Array: new r.Pointer(r.uint16, MarkArray),
      mark2Array: new r.Pointer(r.uint16, BaseArray)
    },
    7: Context,
    8: ChainingContext,
    9: {
      posFormat: r.uint16,
      lookupType: r.uint16,
      extension: new r.Pointer(r.uint32, GPOSLookup)
    }
  });

  GPOSLookup.versions[9].extension.type = GPOSLookup;

  module.exports = new r.Struct({
    version: r.int32,
    scriptList: new r.Pointer(r.uint16, ScriptList),
    featureList: new r.Pointer(r.uint16, FeatureList),
    lookupList: new r.Pointer(r.uint16, new LookupList(GPOSLookup))
  });

  module.exports.GPOSLookup = GPOSLookup;

}).call(this);
