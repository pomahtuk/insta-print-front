// Generated by CoffeeScript 1.9.3
(function() {
  var CmapEntry, CmapGroup, CmapSubtable, DefaultUVS, NonDefaultUVS, SubHeader, UVSMapping, UnicodeValueRange, VarSelectorRecord, r;

  r = require('restructure');

  SubHeader = new r.Struct({
    firstCode: r.uint16,
    entryCount: r.uint16,
    idDelta: r.int16,
    idRangeOffset: r.uint16
  });

  CmapGroup = new r.Struct({
    startCharCode: r.uint32,
    endCharCode: r.uint32,
    glyphID: r.uint32
  });

  UnicodeValueRange = new r.Struct({
    startUnicodeValue: r.uint24,
    additionalCount: r.uint8
  });

  UVSMapping = new r.Struct({
    unicodeValue: r.uint24,
    glyphID: r.uint16
  });

  DefaultUVS = new r.Array(UnicodeValueRange, r.uint32);

  NonDefaultUVS = new r.Array(UVSMapping, r.uint32);

  VarSelectorRecord = new r.Struct({
    varSelector: r.uint24,
    defaultUVS: new r.Pointer(r.uint32, DefaultUVS, {
      type: 'parent'
    }),
    nonDefaultUVS: new r.Pointer(r.uint32, NonDefaultUVS, {
      type: 'parent'
    })
  });

  CmapSubtable = new r.VersionedStruct(r.uint16, {
    0: {
      length: r.uint16,
      language: r.uint16,
      codeMap: new r.LazyArray(r.uint8, 256)
    },
    2: {
      length: r.uint16,
      language: r.uint16,
      subHeaderKeys: new r.Array(r.uint16, 256),
      subHeaderCount: function() {
        return Math.max.apply(Math, this.subHeaderKeys);
      },
      subHeaders: new r.LazyArray(SubHeader, 'subHeaderCount'),
      glyphIndexArray: new r.LazyArray(r.uint16, 'subHeaderCount')
    },
    4: {
      length: r.uint16,
      language: r.uint16,
      segCountX2: r.uint16,
      segCount: function() {
        return this.segCountX2 >> 1;
      },
      searchRange: r.uint16,
      entrySelector: r.uint16,
      rangeShift: r.uint16,
      endCode: new r.LazyArray(r.uint16, 'segCount'),
      reservedPad: new r.Reserved(r.uint16),
      startCode: new r.LazyArray(r.uint16, 'segCount'),
      idDelta: new r.LazyArray(r.int16, 'segCount'),
      idRangeOffset: new r.LazyArray(r.uint16, 'segCount'),
      glyphIndexArray: new r.LazyArray(r.uint16, function() {
        return (this.length - this._currentOffset) / 2;
      })
    },
    6: {
      length: r.uint16,
      language: r.uint16,
      firstCode: r.uint16,
      entryCount: r.uint16,
      glyphIndices: new r.LazyArray(r.uint16, 'entryCount')
    },
    8: {
      reserved: new r.Reserved(r.uint16),
      length: r.uint32,
      language: r.uint16,
      is32: new r.LazyArray(r.uint8, 8192),
      nGroups: r.uint32,
      groups: new r.LazyArray(CmapGroup, 'nGroups')
    },
    10: {
      reserved: new r.Reserved(r.uint16),
      length: r.uint32,
      language: r.uint32,
      firstCode: r.uint32,
      entryCount: r.uint32,
      glyphIndices: new r.LazyArray(r.uint16, 'numChars')
    },
    12: {
      reserved: new r.Reserved(r.uint16),
      length: r.uint32,
      language: r.uint32,
      nGroups: r.uint32,
      groups: new r.LazyArray(CmapGroup, 'nGroups')
    },
    13: {
      reserved: new r.Reserved(r.uint16),
      length: r.uint32,
      language: r.uint32,
      nGroups: r.uint32,
      groups: new r.LazyArray(CmapGroup, 'nGroups')
    },
    14: {
      length: r.uint32,
      numRecords: r.uint32,
      varSelectors: new r.LazyArray(VarSelectorRecord, 'numRecords')
    }
  });

  CmapEntry = new r.Struct({
    platformID: r.uint16,
    encodingID: r.uint16,
    table: new r.Pointer(r.uint32, CmapSubtable, {
      type: 'parent',
      lazy: true
    })
  });

  module.exports = new r.Struct({
    version: r.uint16,
    numSubtables: r.uint16,
    tables: new r.Array(CmapEntry, 'numSubtables')
  });

}).call(this);
