// Generated by CoffeeScript 1.9.3
(function() {
  var AlternateSet, ChainingContext, ClassDef, Context, Coverage, Device, FeatureList, GSUBLookup, Ligature, LigatureSet, LookupList, ScriptList, Sequence, r, ref;

  r = require('restructure');

  ref = require('./opentype'), ScriptList = ref.ScriptList, FeatureList = ref.FeatureList, LookupList = ref.LookupList, Coverage = ref.Coverage, ClassDef = ref.ClassDef, Device = ref.Device, Context = ref.Context, ChainingContext = ref.ChainingContext;

  Sequence = AlternateSet = new r.Array(r.uint16, r.uint16);

  Ligature = new r.Struct({
    glyph: r.uint16,
    compCount: r.uint16,
    components: new r.Array(r.uint16, function() {
      return this.compCount - 1;
    })
  });

  LigatureSet = new r.Array(new r.Pointer(r.uint16, Ligature), r.uint16);

  GSUBLookup = new r.VersionedStruct('lookupType', {
    1: new r.VersionedStruct(r.uint16, {
      1: {
        coverage: new r.Pointer(r.uint16, Coverage),
        deltaGlyphID: r.int16
      },
      2: {
        coverage: new r.Pointer(r.uint16, Coverage),
        glyphCount: r.uint16,
        substitute: new r.LazyArray(r.uint16, 'glyphCount')
      }
    }),
    2: {
      substFormat: r.uint16,
      coverage: new r.Pointer(r.uint16, Coverage),
      count: r.uint16,
      sequences: new r.LazyArray(new r.Pointer(r.uint16, Sequence), 'count')
    },
    3: {
      substFormat: r.uint16,
      coverage: new r.Pointer(r.uint16, Coverage),
      count: r.uint16,
      alternateSet: new r.LazyArray(new r.Pointer(r.uint16, AlternateSet), 'count')
    },
    4: {
      substFormat: r.uint16,
      coverage: new r.Pointer(r.uint16, Coverage),
      count: r.uint16,
      ligatureSets: new r.LazyArray(new r.Pointer(r.uint16, LigatureSet), 'count')
    },
    5: Context,
    6: ChainingContext,
    7: {
      substFormat: r.uint16,
      lookupType: r.uint16,
      extension: new r.Pointer(r.uint32, GSUBLookup)
    },
    8: {
      substFormat: r.uint16,
      coverage: new r.Pointer(r.uint16, Coverage),
      backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),
      lookaheadGlyphCount: r.uint16,
      lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),
      glyphCount: r.uint16,
      substitutes: new r.Array(r.uint16, 'glyphCount')
    }
  });

  GSUBLookup.versions[7].extension.type = GSUBLookup;

  module.exports = new r.Struct({
    version: r.int32,
    scriptList: new r.Pointer(r.uint16, ScriptList),
    featureList: new r.Pointer(r.uint16, FeatureList),
    lookupList: new r.Pointer(r.uint16, new LookupList(GSUBLookup))
  });

}).call(this);
