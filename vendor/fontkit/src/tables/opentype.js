// Generated by CoffeeScript 1.9.3
(function() {
  var ChainRule, ChainRuleSet, ClassDef, ClassRangeRecord, ClassRule, ClassSet, Coverage, Feature, FeatureRecord, LangSysRecord, LangSysTable, LookupFlags, LookupRecord, RangeRecord, Rule, RuleSet, Script, ScriptRecord, r;

  r = require('restructure');

  LangSysTable = new r.Struct({
    reserved: new r.Reserved(r.uint16),
    reqFeatureIndex: r.uint16,
    featureCount: r.uint16,
    featureIndexes: new r.Array(r.uint16, 'featureCount')
  });

  LangSysRecord = new r.Struct({
    tag: new r.String(4),
    langSys: new r.Pointer(r.uint16, LangSysTable, {
      type: 'parent'
    })
  });

  Script = new r.Struct({
    defaultLangSys: new r.Pointer(r.uint16, LangSysTable),
    count: r.uint16,
    langSysRecords: new r.Array(LangSysRecord, 'count')
  });

  ScriptRecord = new r.Struct({
    tag: new r.String(4),
    script: new r.Pointer(r.uint16, Script, {
      type: 'parent'
    })
  });

  exports.ScriptList = new r.Array(ScriptRecord, r.uint16);

  Feature = new r.Struct({
    featureParams: r.uint16,
    lookupCount: r.uint16,
    lookupListIndexes: new r.Array(r.uint16, 'lookupCount')
  });

  FeatureRecord = new r.Struct({
    tag: new r.String(4),
    feature: new r.Pointer(r.uint16, Feature, {
      type: 'parent'
    })
  });

  exports.FeatureList = new r.Array(FeatureRecord, r.uint16);

  LookupFlags = new r.Bitfield(r.uint16, ['rightToLeft', 'ignoreBaseGlyphs', 'ignoreLigatures', 'ignoreMarks', 'useMarkFilteringSet', null, 'markAttachmentType']);

  exports.LookupList = function(SubTable) {
    var Lookup;
    Lookup = new r.Struct({
      lookupType: r.uint16,
      flags: LookupFlags,
      subTableCount: r.uint16,
      subTables: new r.Array(new r.Pointer(r.uint16, SubTable), 'subTableCount'),
      markFilteringSet: r.uint16
    });
    return new r.LazyArray(new r.Pointer(r.uint16, Lookup), r.uint16);
  };

  RangeRecord = new r.Struct({
    start: r.uint16,
    end: r.uint16,
    startCoverageIndex: r.uint16
  });

  Coverage = new r.VersionedStruct(r.uint16, {
    1: {
      glyphCount: r.uint16,
      glyphs: new r.Array(r.uint16, 'glyphCount')
    },
    2: {
      rangeCount: r.uint16,
      rangeRecords: new r.Array(RangeRecord, 'rangeCount')
    }
  });

  exports.Coverage = Coverage;

  ClassRangeRecord = new r.Struct({
    start: r.uint16,
    end: r.uint16,
    "class": r.uint16
  });

  ClassDef = new r.VersionedStruct(r.uint16, {
    1: {
      startGlyph: r.uint16,
      glyphCount: r.uint16,
      classValueArray: new r.Array(r.uint16, 'glyphCount')
    },
    2: {
      classRangeCount: r.uint16,
      classRangeRecord: new r.Array(ClassRangeRecord, 'classRangeCount')
    }
  });

  exports.ClassDef = ClassDef;

  exports.Device = new r.Struct({
    startSize: r.uint16,
    endSize: r.uint16,
    deltaFormat: r.uint16
  });

  LookupRecord = new r.Struct({
    sequenceIndex: r.uint16,
    lookupListIndex: r.uint16
  });

  Rule = new r.Struct({
    glyphCount: r.uint16,
    lookupCount: r.uint16,
    input: new r.Array(r.uint16, function() {
      return this.glyphCount - 1;
    }),
    lookupRecords: new r.Array(LookupRecord, 'lookupCount')
  });

  RuleSet = new r.Array(new r.Pointer(r.uint16, Rule), r.uint16);

  ClassRule = new r.Struct({
    glyphCount: r.uint16,
    lookupCount: r.uint16,
    classes: new r.Array(r.uint16, function() {
      return this.glyphCount - 1;
    }),
    lookupRecords: new r.Array(LookupRecord, 'lookupCount')
  });

  ClassSet = new r.Array(new r.Pointer(r.uint16, ClassRule), r.uint16);

  exports.Context = new r.VersionedStruct(r.uint16, {
    1: {
      coverage: new r.Pointer(r.uint16, Coverage),
      ruleSetCount: r.uint16,
      ruleSets: new r.Array(new r.Pointer(r.uint16, RuleSet), 'ruleSetCount')
    },
    2: {
      coverage: new r.Pointer(r.uint16, Coverage),
      classDef: new r.Pointer(r.uint16, ClassDef),
      classSetCnt: r.uint16,
      classSet: new r.Array(new r.Pointer(r.uint16, ClassSet), 'classSetCnt')
    },
    3: {
      glyphCount: r.uint16,
      lookupCount: r.uint16,
      coverages: new r.Array(new r.Pointer(r.uint16, Coverage), 'glyphCount'),
      lookupRecords: new r.Array(LookupRecord, 'lookupCount')
    }
  });

  ChainRule = new r.Struct({
    backtrackGlyphCount: r.uint16,
    backtrack: new r.Array(r.uint16, 'backtrackGlyphCount'),
    inputGlyphCount: r.uint16,
    input: new r.Array(r.uint16, function() {
      return this.inputGlyphCount - 1;
    }),
    lookaheadGlyphCount: r.uint16,
    lookahead: new r.Array(r.uint16, 'lookaheadGlyphCount'),
    lookupCount: r.uint16,
    lookupRecords: new r.Array(LookupRecord, 'lookupCount')
  });

  ChainRuleSet = new r.Array(new r.Pointer(r.uint16, ChainRule), r.uint16);

  exports.ChainingContext = new r.VersionedStruct(r.uint16, {
    1: {
      coverage: new r.Pointer(r.uint16, Coverage),
      chainCount: r.uint16,
      chainRuleSets: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')
    },
    2: {
      coverage: new r.Pointer(r.uint16, Coverage),
      backtrackClassDef: new r.Pointer(r.uint16, ClassDef),
      inputClassDef: new r.Pointer(r.uint16, ClassDef),
      lookaheadClassDef: new r.Pointer(r.uint16, ClassDef),
      chainCount: r.uint16,
      chainClassSet: new r.Array(new r.Pointer(r.uint16, ChainRuleSet), 'chainCount')
    },
    3: {
      backtrackGlyphCount: r.uint16,
      backtrackCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'backtrackGlyphCount'),
      inputGlyphCount: r.uint16,
      inputCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'inputGlyphCount'),
      lookaheadGlyphCount: r.uint16,
      lookaheadCoverage: new r.Array(new r.Pointer(r.uint16, Coverage), 'lookaheadGlyphCount'),
      lookupCount: r.uint16,
      lookupRecords: new r.Array(LookupRecord, 'lookupCount')
    }
  });

}).call(this);
