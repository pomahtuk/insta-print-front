// Generated by CoffeeScript 1.9.3
(function() {
  var BBox, COLRGlyph, Glyph,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Glyph = require('./Glyph');

  BBox = require('./BBox');

  COLRGlyph = (function(superClass) {
    var COLRLayer, get;

    extend(COLRGlyph, superClass);

    function COLRGlyph() {
      return COLRGlyph.__super__.constructor.apply(this, arguments);
    }

    get = require('../get')(COLRGlyph);

    COLRLayer = (function() {
      function COLRLayer(glyph1, color1) {
        this.glyph = glyph1;
        this.color = color1;
      }

      return COLRLayer;

    })();

    COLRGlyph.prototype._getBBox = function() {
      var b, bbox, j, layer, len, ref;
      bbox = new BBox;
      ref = this.layers;
      for (j = 0, len = ref.length; j < len; j++) {
        layer = ref[j];
        b = layer.glyph.bbox;
        bbox.addPoint(b.minX, b.minY);
        bbox.addPoint(b.maxX, b.maxY);
      }
      return bbox;
    };

    get('layers', function() {
      var baseLayer, color, colr, cpal, g, high, i, j, low, mid, rec, ref, ref1, results;
      cpal = this._font.CPAL;
      colr = this._font.COLR;
      low = 0;
      high = colr.baseGlyphRecord.length - 1;
      while (low <= high) {
        mid = (low + high) >> 1;
        rec = colr.baseGlyphRecord[mid];
        if (this.id < rec.gid) {
          high = mid - 1;
        } else if (this.id > rec.gid) {
          low = mid + 1;
        } else {
          baseLayer = rec;
          break;
        }
      }
      if (baseLayer == null) {
        g = this._font._getBaseGlyph(this.id);
        color = {
          red: 0,
          green: 0,
          blue: 0,
          alpha: 255
        };
        return [new COLRLayer(g, color)];
      }
      results = [];
      for (i = j = ref = baseLayer.firstLayerIndex, ref1 = baseLayer.firstLayerIndex + baseLayer.numLayers; j < ref1; i = j += 1) {
        rec = colr.layerRecords[i];
        color = cpal.colorRecords[rec.paletteIndex];
        g = this._font._getBaseGlyph(rec.gid);
        results.push(new COLRLayer(g, color));
      }
      return results;
    });

    COLRGlyph.prototype.render = function(ctx, size) {
      var color, glyph, j, len, ref, ref1, results;
      ref = this.layers;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        ref1 = ref[j], glyph = ref1.glyph, color = ref1.color;
        ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);
        results.push(glyph.render(ctx, size));
      }
      return results;
    };

    return COLRGlyph;

  })(Glyph);

  module.exports = COLRGlyph;

}).call(this);
