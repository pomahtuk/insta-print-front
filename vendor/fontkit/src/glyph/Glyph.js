// Generated by CoffeeScript 1.9.3
(function() {
  var Glyph, Path, unicode;

  Path = require('./Path');

  unicode = require('unicode-properties');

  Glyph = (function() {
    var get, getMetrics;

    get = require('../get')(Glyph);

    function Glyph(id, codePoints, _font) {
      this.id = id;
      this.codePoints = codePoints;
      this._font = _font;
      this.isMark = this.codePoints.every(unicode.isMark);
      this.isLigature = this.codePoints.length > 1;
    }

    Glyph.prototype._getPath = function() {
      return new Path;
    };

    Glyph.prototype._getCBox = function() {
      return this.path.cbox;
    };

    Glyph.prototype._getBBox = function() {
      return this.path.bbox;
    };

    getMetrics = function(table, gid) {
      var ref, res;
      if (gid < table.metrics.length) {
        return table.metrics.get(gid);
      }
      res = {
        advance: ((ref = table.metrics.get(table.metrics.length - 1)) != null ? ref.advance : void 0) || 0,
        bearing: table.bearings.get(gid - table.metrics.length) || 0
      };
      return res;
    };

    Glyph.prototype._getMetrics = function(cbox) {
      var advanceHeight, advanceWidth, hhea, leftBearing, os2, ref, ref1, topBearing;
      if (this._metrics) {
        return this._metrics;
      }
      ref = getMetrics(this._font.hmtx, this.id), advanceWidth = ref.advance, leftBearing = ref.bearing;
      if (this._font.vmtx) {
        ref1 = getMetrics(this._font.vmtx, this.id), advanceHeight = ref1.advance, topBearing = ref1.bearing;
      } else {
        if (cbox == null) {
          cbox = this.cbox;
        }
        if ((os2 = this._font['OS/2']) && os2.version > 0) {
          advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
          topBearing = os2.typoAscender - cbox.maxY;
        } else {
          hhea = this._font.hhea;
          advanceHeight = Math.abs(hhea.ascent - hhea.descent);
          topBearing = hhea.ascent - cbox.maxY;
        }
      }
      return this._metrics = {
        advanceWidth: advanceWidth,
        advanceHeight: advanceHeight,
        leftBearing: leftBearing,
        topBearing: topBearing
      };
    };

    get('cbox', function() {
      return this._cbox != null ? this._cbox : this._cbox = this._getCBox();
    });

    get('bbox', function() {
      return this._bbox != null ? this._bbox : this._bbox = this._getBBox();
    });

    get('path', function() {
      return this._path != null ? this._path : this._path = this._getPath();
    });

    get('advanceWidth', function() {
      return this._advanceWidth != null ? this._advanceWidth : this._advanceWidth = this._getMetrics().advanceWidth;
    });

    get('advanceHeight', function() {
      return this._advanceHeight != null ? this._advanceHeight : this._advanceHeight = this._getMetrics().advanceHeight;
    });

    get('ligatureCaretPositions', function() {});

    Glyph.prototype.render = function(ctx, size) {
      var fn, scale;
      ctx.save();
      scale = 1 / this._font.head.unitsPerEm * size;
      ctx.scale(scale, scale);
      fn = this.path.toFunction();
      fn(ctx);
      ctx.fill();
      return ctx.restore();
    };

    return Glyph;

  })();

  module.exports = Glyph;

}).call(this);
