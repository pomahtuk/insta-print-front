// Generated by CoffeeScript 1.9.3
(function() {
  var UnicodeLayoutEngine, unicode;

  unicode = require('unicode-properties');

  UnicodeLayoutEngine = (function() {
    function UnicodeLayoutEngine(font) {
      this.font = font;
    }

    UnicodeLayoutEngine.prototype.positionGlyphs = function(glyphs, positions) {
      var clusterEnd, clusterStart, glyph, i, index, len;
      clusterStart = 0;
      clusterEnd = 0;
      for (index = i = 0, len = glyphs.length; i < len; index = ++i) {
        glyph = glyphs[index];
        if (glyph.isMark) {
          clusterEnd = index;
        } else {
          if (clusterStart !== clusterEnd) {
            this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
          }
          clusterStart = clusterEnd = index;
        }
      }
      if (clusterStart !== clusterEnd) {
        this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
      }
      return positions;
    };

    UnicodeLayoutEngine.prototype.positionCluster = function(glyphs, positions, clusterStart, clusterEnd) {
      var base, baseBox, combiningClass, i, index, mark, markBox, position, ref, ref1, xOffset, yGap, yOffset;
      base = glyphs[clusterStart];
      baseBox = base.cbox.copy();
      if (base.codePoints.length > 1) {
        baseBox.minX += ((base.codePoints.length - 1) * baseBox.width) / base.codePoints.length;
      }
      xOffset = -positions[clusterStart].xAdvance;
      yOffset = 0;
      yGap = this.font.unitsPerEm / 16;
      for (index = i = ref = clusterStart + 1, ref1 = clusterEnd; i <= ref1; index = i += 1) {
        mark = glyphs[index];
        markBox = mark.cbox;
        position = positions[index];
        combiningClass = this.getCombiningClass(mark.codePoints[0]);
        if (combiningClass !== 'Not_Reordered') {
          position.xOffset = position.yOffset = 0;
          switch (combiningClass) {
            case 'Double_Above':
            case 'Double_Below':
              position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
              break;
            case 'Attached_Below_Left':
            case 'Below_Left':
            case 'Above_Left':
              position.xOffset += baseBox.minX - markBox.minX;
              break;
            case 'Attached_Above_Right':
            case 'Below_Right':
            case 'Above_Right':
              position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
              break;
            default:
              position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
          }
          switch (combiningClass) {
            case 'Double_Below':
            case 'Below_Left':
            case 'Below':
            case 'Below_Right':
            case 'Attached_Below_Left':
            case 'Attached_Below':
              if (combiningClass !== 'Attached_Below_Left' && combiningClass !== 'Attached_Below') {
                baseBox.minY += yGap;
              }
              position.yOffset = -baseBox.minY - markBox.maxY;
              baseBox.minY += markBox.height;
              break;
            case 'Double_Above':
            case 'Above_Left':
            case 'Above':
            case 'Above_Right':
            case 'Attached_Above':
            case 'Attached_Above_Right':
              if (combiningClass !== 'Attached_Above' && combiningClass !== 'Attached_Above_Right') {
                baseBox.maxY += yGap;
              }
              position.yOffset = baseBox.maxY - markBox.minY;
              baseBox.maxY += markBox.height;
          }
          position.xAdvance = position.yAdvance = 0;
          position.xOffset += xOffset;
          position.yOffset += yOffset;
        } else {
          xOffset -= position.xAdvance;
          yOffset -= position.yAdvance;
        }
      }
    };

    UnicodeLayoutEngine.prototype.getCombiningClass = function(codePoint) {
      var combiningClass;
      combiningClass = unicode.getCombiningClass(codePoint);
      if ((codePoint & ~0xff) === 0x0e00) {
        if (combiningClass === 'Not_Reordered') {
          switch (codePoint) {
            case 0x0e31:
            case 0x0e34:
            case 0x0e35:
            case 0x0e36:
            case 0x0e37:
            case 0x0e47:
            case 0x0e4c:
            case 0x0e3d:
            case 0x0e4e:
              return 'Above_Right';
            case 0x0eb1:
            case 0x0eb4:
            case 0x0eb5:
            case 0x0eb6:
            case 0x0eb7:
            case 0x0ebb:
            case 0x0ecc:
            case 0x0ecd:
              return 'Above';
            case 0x0ebc:
              return 'Below';
          }
        } else if (codePoint === 0x0e3a) {
          return 'Below_Right';
        }
      }
      switch (combiningClass) {
        case 'CCC10':
        case 'CCC11':
        case 'CCC12':
        case 'CCC13':
        case 'CCC14':
        case 'CCC15':
        case 'CCC16':
        case 'CCC17':
        case 'CCC18':
        case 'CCC20':
        case 'CCC22':
          return 'Below';
        case 'CCC23':
          return 'Attached_Above';
        case 'CCC24':
          return 'Above_Right';
        case 'CCC25':
        case 'CCC19':
          return 'Above_Left';
        case 'CCC26':
          return 'Above';
        case 'CCC21':
          break;
        case 'CCC27':
        case 'CCC28':
        case 'CCC30':
        case 'CCC31':
        case 'CCC33':
        case 'CCC34':
        case 'CCC35':
        case 'CCC36':
          return 'Above';
        case 'CCC29':
        case 'CCC32':
          return 'Below';
        case 'CCC103':
          return 'Below_Right';
        case 'CCC107':
          return 'Above_Right';
        case 'CCC118':
          return 'Below';
        case 'CCC122':
          return 'Above';
        case 'CCC129':
        case 'CCC132':
          return 'Below';
        case 'CCC130':
          return 'Above';
      }
      return combiningClass;
    };

    return UnicodeLayoutEngine;

  })();

  module.exports = UnicodeLayoutEngine;

}).call(this);
