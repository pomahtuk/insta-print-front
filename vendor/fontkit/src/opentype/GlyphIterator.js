// Generated by CoffeeScript 1.9.3
(function() {
  var GlyphIterator;

  GlyphIterator = (function() {
    var get, move, shouldIgnore;

    get = require('../get')(GlyphIterator);

    function GlyphIterator(glyphs, flags) {
      this.glyphs = glyphs;
      this.reset(flags);
    }

    GlyphIterator.prototype.reset = function(flags1) {
      this.flags = flags1 != null ? flags1 : {};
      return this.index = 0;
    };

    get('cur', function() {
      return this.glyphs[this.index] || null;
    });

    shouldIgnore = function(glyph, flags) {
      return (flags.ignoreMarks && glyph.isMark) || (flags.ignoreBaseGlyphs && !glyph.isMark) || (flags.ignoreLigatures && glyph.isLigature);
    };

    move = function(dir) {
      var ref, ref1;
      this.index += dir;
      while ((0 <= (ref = this.index) && ref < this.glyphs.length) && shouldIgnore(this.glyphs[this.index], this.flags)) {
        this.index += dir;
      }
      if (!((0 <= (ref1 = this.index) && ref1 < this.glyphs.length))) {
        return null;
      }
      return this.glyphs[this.index];
    };

    GlyphIterator.prototype.next = function() {
      return move.call(this, 1);
    };

    GlyphIterator.prototype.prev = function() {
      return move.call(this, -1);
    };

    GlyphIterator.prototype.peek = function(count) {
      var idx, res;
      if (count == null) {
        count = 1;
      }
      idx = this.index;
      res = this.increment(count);
      this.index = idx;
      return res;
    };

    GlyphIterator.prototype.peekIndex = function(count) {
      var idx, res;
      if (count == null) {
        count = 1;
      }
      idx = this.index;
      this.increment(count);
      res = this.index;
      this.index = idx;
      return res;
    };

    GlyphIterator.prototype.increment = function(count) {
      var dir;
      if (count == null) {
        count = 1;
      }
      dir = count < 0 ? -1 : 1;
      count = Math.abs(count);
      while (count--) {
        move.call(this, dir);
      }
      return this.glyphs[this.index];
    };

    return GlyphIterator;

  })();

  module.exports = GlyphIterator;

}).call(this);
